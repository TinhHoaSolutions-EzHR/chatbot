"use strict";(self.webpackChunkdocss=self.webpackChunkdocss||[]).push([[8054],{22042:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"localDevelopmentGuide/highLevelArchitecture","title":"Architecture","description":"High-level architecture overview of the Large Language Model (LLM) application for intelligent query responses.","source":"@site/docs/localDevelopmentGuide/highLevelArchitecture.mdx","sourceDirName":"localDevelopmentGuide","slug":"/localDevelopmentGuide/highLevelArchitecture","permalink":"/docs/localDevelopmentGuide/highLevelArchitecture","draft":false,"unlisted":false,"editUrl":"https://github.com/TinhHoaSolutions-EzHR/chatbot/tree/main/docs/docs/localDevelopmentGuide/highLevelArchitecture.mdx","tags":[],"version":"current","frontMatter":{"title":"Architecture","description":"High-level architecture overview of the Large Language Model (LLM) application for intelligent query responses."},"sidebar":"localDevelopmentGuideSidebar","previous":{"title":"Local Development Guide","permalink":"/docs/category/local-development-guide"},"next":{"title":"Naming Conventions","permalink":"/docs/localDevelopmentGuide/namingConvention"}}');var s=i(74848),a=i(28453);const t=i.p+"assets/images/architecture-caece6095434a42384ef80c51c49e708.png",l={title:"Architecture",description:"High-level architecture overview of the Large Language Model (LLM) application for intelligent query responses."},c="Chatbot High-level Architecture",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Architecture Diagram",id:"architecture-diagram",level:2},{value:"Components",id:"components",level:2},{value:"1. User Interface layer",id:"1-user-interface-layer",level:3},{value:"Web Frontend",id:"web-frontend",level:4},{value:"Zalo Chatbot",id:"zalo-chatbot",level:4},{value:"2. API &amp; Backend layer",id:"2-api--backend-layer",level:3},{value:"Web Server",id:"web-server",level:4},{value:"API Server",id:"api-server",level:4},{value:"3. LLM &amp; Embedding layer",id:"3-llm--embedding-layer",level:3},{value:"Large language model",id:"large-language-model",level:4},{value:"Embedding model",id:"embedding-model",level:4},{value:"4. Data Management layer",id:"4-data-management-layer",level:3},{value:"LLM Cache",id:"llm-cache",level:4},{value:"Vector Database",id:"vector-database",level:4},{value:"Relational Database",id:"relational-database",level:4},{value:"5. Document Processing layer",id:"5-document-processing-layer",level:3},{value:"Document Storage",id:"document-storage",level:4},{value:"Background Task Queue",id:"background-task-queue",level:4},{value:"Workflow",id:"workflow",level:2},{value:"Acknowledgements",id:"acknowledgements",level:2}];function h(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"chatbot-high-level-architecture",children:"Chatbot High-level Architecture"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"This document provides a high-level overview of the architecture for our Large Language Model (LLM) application, designed to assist back-office employees with intelligent query responses. The application leverages a combination of a large language model (LLM), document embedding, semantic search, and caching to deliver fast and accurate answers based on company documents. Each component is containerized, enabling scalability, modularity, and ease of deployment."}),"\n","\n",(0,s.jsx)("img",{src:t,alt:"Architecture"}),"\n",(0,s.jsx)(n.h2,{id:"architecture-diagram",children:"Architecture Diagram"}),"\n",(0,s.jsx)(n.p,{children:"The following is a simplified view of the system\u2019s core components and their interactions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"User Interface layer"}),"\n",(0,s.jsx)(n.li,{children:"API & Backend layer"}),"\n",(0,s.jsx)(n.li,{children:"LLM & Embedding layer"}),"\n",(0,s.jsx)(n.li,{children:"Data Management layer"}),"\n",(0,s.jsx)(n.li,{children:"Document processing layer"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,s.jsx)(n.h3,{id:"1-user-interface-layer",children:"1. User Interface layer"}),"\n",(0,s.jsx)(n.h4,{id:"web-frontend",children:"Web Frontend"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: NextJS"}),"\n",(0,s.jsx)(n.li,{children:"Function: Provides the primary user interface for employees to interact with the assistant. Built with NextJS, the frontend is responsive and optimized for delivering a seamless user experience."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"zalo-chatbot",children:"Zalo Chatbot"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: using Zalo API"}),"\n",(0,s.jsx)(n.li,{children:"Function: Acts as an additional chatbot interface, potentially integrated with Zalo (a popular chat platform). The chatbot is proxied through Nginx for better performance and security."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-api--backend-layer",children:"2. API & Backend layer"}),"\n",(0,s.jsx)(n.h4,{id:"web-server",children:"Web Server"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: Nginx"}),"\n",(0,s.jsx)(n.li,{children:"Function: Operates as a reverse proxy, routing requests from the frontend to the backend API server. Nginx enhances security and load balancing, helping manage high request volumes effectively."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"api-server",children:"API Server"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: FastAPI"}),"\n",(0,s.jsx)(n.li,{children:"Function: The core backend server, handling API requests, managing cache checks, interfacing with the LLM, and orchestrating document retrieval. FastAPI\u2019s asynchronous capabilities allow the API to handle multiple requests efficiently, making it suitable for real-time applications."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-llm--embedding-layer",children:"3. LLM & Embedding layer"}),"\n",(0,s.jsx)(n.h4,{id:"large-language-model",children:"Large language model"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: OpenAI API/self-host LLM model"}),"\n",(0,s.jsx)(n.li,{children:"Function: The primary LLM for answering user queries. The model receives user queries (with context provided from relevant documents) and generates human-like responses."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"embedding-model",children:"Embedding model"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: OpenAI API/self-host embedding model"}),"\n",(0,s.jsx)(n.li,{children:"Function: Maps text to vector embeddings, a process crucial for similarity search. This component enables the system to find and rank relevant documents based on user queries. The choice of GPT or PhoBERT allows flexibility in handling multilingual or domain-specific embedding needs."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-data-management-layer",children:"4. Data Management layer"}),"\n",(0,s.jsx)(n.h4,{id:"llm-cache",children:"LLM Cache"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: Redis"}),"\n",(0,s.jsx)(n.li,{children:"Function: Caches responses from the LLM based on query embeddings, minimizing redundant API calls. This significantly reduces response latency for frequently asked questions and optimizes API usage costs."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"vector-database",children:"Vector Database"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: Qdrant"}),"\n",(0,s.jsx)(n.li,{children:"Function: Stores vector embeddings generated from documents and supports semantic search. When a query is received, Qdrant enables the system to quickly find and return similar documents based on vector similarity."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"relational-database",children:"Relational Database"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: PostgreSQL"}),"\n",(0,s.jsx)(n.li,{children:"Function: Manages structured data, including user information, permissions, and system metadata. This database is essential for tracking user access and managing query history and other operational data."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-document-processing-layer",children:"5. Document Processing layer"}),"\n",(0,s.jsx)(n.h4,{id:"document-storage",children:"Document Storage"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: MinIO"}),"\n",(0,s.jsx)(n.li,{children:"Function: Stores documents (in PDF format) sourced from the company\u2019s website or other repositories. MinIO, an S3-compatible object storage solution, offers scalable and private storage for company documents."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"background-task-queue",children:"Background Task Queue"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Service: Celery"}),"\n",(0,s.jsx)(n.li,{children:"Function: Orchestrates background tasks, including document fetching, processing, and embedding. This allows the system to handle these tasks asynchronously, ensuring that document indexing does not impact the main query processing flow."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"workflow",children:"Workflow"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"User Query:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A user submits a query through the Web Frontend or Zalo Chatbot."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Request Handling:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The query is routed via the Web Server (Nginx) to the API Server (FastAPI)."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Cache Lookup:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The API Server checks the LLM Cache (Redis) to see if a response for this query is available."}),"\n",(0,s.jsx)(n.li,{children:"If a cached response is found, it is returned to the user, reducing latency and API costs."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsx)(n.li,{children:"Embedding and Document Retrieval:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"If no cache hit, the query is embedded by the Embedding Model and sent to the Vector Database (Qdrant)."}),"\n",(0,s.jsx)(n.li,{children:"Qdrant performs a similarity search, returning relevant documents."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"LLM Query:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The API Server forwards the user\u2019s query and relevant document context to the Large Language Model (OpenAI API) for response generation."}),"\n",(0,s.jsx)(n.li,{children:"The response is then cached in Redis for future use."}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{start:"6",children:["\n",(0,s.jsx)(n.li,{children:"Background Document Processing:"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Periodically, Celery fetches new documents from the Company\u2019s Website, processes them into vector embeddings using the Embedding Model, and stores these embeddings in the Vector Database for future query matching."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"acknowledgements",children:"Acknowledgements"}),"\n",(0,s.jsx)(n.p,{children:"This application builds on top of other open-source projects and leverages them:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/vercel/next.js",children:"NextJS"})," for a dynamic and responsive front-end."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/fastapi/fastapi",children:"FastAPI"})," for a high-performance, asynchronous API backend."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/redis/redis",children:"Redis"})," for caching responses and reducing latency."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/qdrant/qdrant",children:"Qdrant"})," as a vector database for semantic search."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/minio/minio",children:"MinIO"})," for scalable object storage of documents."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/celery/celery",children:"Celery"})," for managing background tasks, ensuring real-time user experience is not impacted by document processing."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This high-level architecture is designed to support a fast, scalable, and cost-effective solution for assisting employees with document-based query responses. It leverages modern microservices architecture principles, providing a robust foundation for further enhancements."})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);