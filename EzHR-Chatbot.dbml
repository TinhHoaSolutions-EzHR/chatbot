Project "EzHR-Chatbot" {
  database_type: 'MSSQL'
  Note: '''
# Database schema for EzHR Chatbot.
## Details
### Enums

1. chat_session_shared_status: public/private visibility
2. chat_message_type: system/user/assistant message types
3. chat_message_error_type: various error types (system/validation/network/generation)
4. document_source: file or google_drive
5. index_status: document indexing states
6. user_role: admin/user roles
7. agent_type: system/user agent types


### Main Tables

1. alembic_version: Version control for database migrations
2. user: User account details
3. user_setting: User-specific settings
4. agent: Chatbot agents with prompts and tools
5. chat_session: Conversation sessions between users and agents
6. chat_message: Individual messages in chat sessions
7. feedback: User feedback on messages/nodes
8. connector: Document source connectors
9. document: Document information and metadata
10. llm_provider: LLM service configurations
11. embedding_provider: Embedding service configurations
'''
}

// ===============================================================
// =========================== ENUM ==============================
// ===============================================================

enum chatbot_core.chat_session_shared_status {
  public
  private
}

enum chatbot_core.chat_message_type {
  system
  user
  assistant
}

enum chatbot_core.chat_message_error_type {
  system_error
  validation_error
  network_error
  generation_error
}

enum chatbot_core.document_source {
  file
  google_drive
  github
}

enum chatbot_core.index_status {
  pending
  started
  success
  failed
}

enum chatbot_core.user_role {
  admin
  user
}

enum chatbot_core.agent_type {
  system
  user
}

// ===============================================================
// =========================== MAIN TABLES =======================
// ===============================================================

TABLE chatbot_core.alembic_version {
  version_num varchar [unique, not null, primary key]

  Note: 'Table to store alembic version.'
}

TABLE chatbot_core.user {
  id uuid [unique, not null, primary key]

  email varchar(255) [not null, unique]
  hashed_password varchar(255) [not null]
  is_active boolean [not null, default: true, note: 'Whether user is active or not.']
  is_admin boolean [not null, default: false, note: 'Whether user is admin or not.']
  is_verified boolean [not null, default: false, note: 'Whether user is verified via email or not.']
  role user_role [not null, note: 'Role of the user. E.g. admin, user.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'User table to store basic user details.'
}

TABLE chatbot_core.user_setting {
  id uuid [unique, not null, primary key, ref: > chatbot_core.user.id]
  recent_agent_id uuid [null, ref: > chatbot_core.agent.id, note: 'Recent agent id used by the user.']

  auto_scroll boolean [not null, default: true, note: 'Whether auto scroll is enabled or not.']
  default_model varchar(255) [null, note: 'Default model name to use for the user. Priority: user setting => agent.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Table to store user settings.'
}

TABLE chatbot_core.agent {
  id uuid [unique, not null, primary key]
  user_id uuid [not null, ref: > chatbot_core.user.id, note: 'User id who created the agent.']

  name varchar(255) [not null]
  prompt varchar(255) [not null, note: 'Prompt text for the agent.']
  agent_type agent_type [not null, note: 'Type of agent. E.g. system, user.']
  is_visible boolean [not null, note: 'Whether agent is visible or not.']
  uploaded_image_path varchar(255) [null, note: 'Path to image uploded by user, saved in object storage.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Agent is a customized combination of prompts and tools. An agent only has 1 system prompt and many tools.'
}

TABLE chatbot_core.starter_message {
  id uuid [unique, not null, primary key]
  agent_id uuid [not null, ref: > chatbot_core.agent.id, note: 'Agent id for the starter message.']

  name varchar(255) [not null, note: 'Name of the starter message.']
  message text [not null, note: 'Starter message text.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Stores starter messages for agents.'
}

TABLE chatbot_core.folder {
  id uuid [unique, not null, primary key]
  user_id uuid [not null, ref: > chatbot_core.user.id, note: 'User id who created the folder.']

  name varchar(255) [not null, note: 'Name of the folder.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Stores chat sessions.'
}

TABLE chatbot_core.chat_session {
  id uuid [unique, not null, primary key]
  user_id uuid [not null, ref: > chatbot_core.user.id, note: 'User id for the chat session.']
  agent_id uuid [not null, ref: > chatbot_core.agent.id, note: 'Agent id for the chat session.']
  folder_id uuid [null, ref: > chatbot_core.folder.id, note: 'Folder id for the chat session.']

  description varchar(255) [null, note: 'Name of the chat session, auto-generated after creation.']
  shared_status chat_session_shared_status [not null, default: 'private', note: 'Whether chat session is shared or not. E.g private, public.']
  current_alternate_model varchar [null, note: 'Current alternate model being used for this chat session. Priority: user setting => agent.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Chat session table to store chat session details, a chat session contains many chat messages.'
}

TABLE chatbot_core.chat_message {
  id uuid [unique, not null, primary key]
  chat_session_id uuid [not null, ref: > chatbot_core.chat_session.id]
  parent_message_id uuid [null, ref: > chatbot_core.chat_message.id, note: 'Parent message id for the current message.']
  child_message_id uuid [null, ref: > chatbot_core.chat_message.id, note: 'Child message id for the current message.']

  message text [not null, note: 'Chat message text.']
  message_type chat_message_type [not null, note: 'Type of message. E.g. system, user, assistant.']
  token_count int [not null, default: 0, note: 'Number of tokens in the message.']
  error_type chat_message_error_type [null, note: 'Type of error in the message. E.g. system_error, validation_error, network_error, generation_error.']
  error text [null, note: 'Error message.']
  is_sensitive boolean [not null, default: false, note: 'Whether message is sensitive or not.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Table to store chat messages, 1-1 relation with chat_session.'
}

TABLE chatbot_core.feedback {
  id uuid [unique, not null, primary key]
  chat_message_id uuid [not null, ref: > chatbot_core.chat_message.id]

  is_possitive boolean [not null, note: 'Whether feedback is positive or negative.']
  feedback_text text [null, note: 'Feedback text.']

  created_at timestamp

  Note: 'Table to store feedback for chat messages. For message feedbacks in chat session, also feedback for node that retrieved from vector database.'
}

TABLE chatbot_core.connector {
  id uuid [unique, not null, primary key]

  name varchar [not null]
  source document_source [not null, note: 'Which document source? file or google_drive']
  connector_specific_config varchar [null, note: 'Connector specific config.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Connector is used to retrieve documents from different sources, can be file, google drive, github, etc.'
}

TABLE chatbot_core.document {
  id uuid [unique, not null, primary key]

  name varchar(255) [not null, note: 'Name of the document.']
  last_synced_at timestamp [null, note: 'Last synced timestamp.']
  document_url varchar(255) [not null, note: 'Link to the document. Default link to object storage.']
  is_public boolean [not null, default: false, note: 'Whether document is public or not.']
  issue_date date [1970-01-01, null, note: 'Issue date of the document.']
  is_outdated boolean [not null, default: false, note: 'Whether document is outdated or not.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Table to store documents metadata. The real document content is stored in object storage, retrieve via field document_url.'
}

TABLE chatbot_core.llm_provider {
  id uuid [unique, not null, primary key]
  name varchar(255) [not null, note: 'Name of the LLM provider such as OpenAI, Gemini, ClaudeAI, etc.']
  api_key varchar(255) [not null, note: 'Encrypted API key to access the LLM provider.']
  model varchar(255) [not null, note: 'Model name to use for this provider such as distilbert-base-nli-stsb-mean-tokens, etc.']
  current_model varchar(255) [null, note: 'Current model name being used for this provider. Priority: user setting => agent.']
  is_active boolean [not null, default: true, note: 'Whether this provider is active or not.']
  is_default_provider boolean [not null, note: 'Whether this provider is default or not.']
  temperature float [not null, note: 'Temperature for sampling.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'LLM providers like OpenAI, ClaudeAI, Gemini, etc.'
}

TABLE chatbot_core.embedding_provider {
  id uuid [unique, not null, primary key]
  name varchar(255) [not null, note: 'Name of the embedding provider such as text-3-embedding-small, SentenceTransformers, etc.']
  api_key varchar(255) [null, note: 'Encrypted API key to access the embedding provider.']
  model varchar(255) [not null, note: 'Model name to use for this provider such as distilbert-base-nli-stsb-mean-tokens, etc.']
  current_model varchar(255) [null, note: 'Current model name being used for this provider. Priority: user setting => agent.']
  is_active boolean [not null, default: true, note: 'Whether this provider is active or not.']
  is_default_provider boolean [not null, note: 'Whether this provider is default or not.']
  dimensions int [not null, note: 'Number of dimensions in the embedding.']
  embed_batch_size int [not null, note: 'Batch size for embedding.']

  created_at timestamp
  updated_at timestamp
  deleted_at timestamp

  Note: 'Embedding providers like text-3-embedding-small, SentenceTransformers, etc.'
}

// TABLE chatbot_core.tool {
//   id uuid [unique, not null, primary key]
//   name varchar(255) [not null]
//   display_name varchar(255) [not null, note: 'Display name of the tool.']
//   description text [not null, note: 'Description of the tool.']
//   tool_type tool_type [not null, note: 'Type of tool. E.g. function, query_engine.']
//   custom_header json [null, note: 'Custom header for the tool.']
//   openapi_schema json [null, note: 'OpenAPI schema for the tool.']
//   created_at timestamp
//   updated_at timestamp
//   deleted_at timestamp
//
//   Note: 'Saving tools metadata, tools such as search_google, search_ezhr_portal, connect_to_mobile, update_knowledge_library.'
// }

// TABLE chatbot_core.token_rate_limit {
//   id uuid [unique, not null, primary key]
//   is_enabled boolean [not null, default: false, note: 'Whether token rate limit is enabled or not.']
//   token_budget int [not null, note: 'Number of tokens allowed per user per period.']
//   period_hours int [not null, note: 'Period in hours. E.g 1, 2, 3 hours.']
//   created_at timestamp
//   updated_at timestamp
//   deleted_at timestamp
//
//   Note: 'Table to store token rate limit config.'
// }

// TABLE chatbot_core.index_attempt {
//   id uuid [unique, not null, primary key]
//   connector_id uuid [not null, ref: > chatbot_core.connector.id]
//   status index_status [not null, note: 'Status of the index attempt. E.g. not_started, in_progress, success, canceled, failed, completed_with_errors.']
//   total_docs_indexed int [null, note: 'Total number of documents indexed.']
//   new_docs_indexed int [null, note: 'Number of new documents replaced in the index during current indexing attempt.']
//   removed_docs_indexed int [null, note: 'Number of documents removed from the index during current indexing attempt.']
//   error_message text [null, note: 'Error message if index attempt failed.']
//   full_exception_trace text [null, note: 'Full exception trace if index attempt failed.']
//   started_at timestamp [null, note: 'Index attempt started timestamp.']
//   created_at timestamp
//   updated_at timestamp
//   deleted_at timestamp
//
//   Note: 'Table to store index attempt details.'
// }

// TABLE chatbot_core.credential {
//   id uuid [unique, not null, primary key]
//   user_id uuid [not null, ref: > chatbot_core.user.id]
//   name varchar(255) [not null, note: 'Name of the credential.']
//   source document_source [not null, note: 'Which document source?']
//   credential_config json [null, note: 'Credential config.']
//   is_public boolean [not null, default: false, note: 'Whether credential is public or not.']
//   created_at timestamp
//   updated_at timestamp
//   deleted_at timestamp
//
//   Note: 'Table to store credentials. Used to access to different connectors.'
// }

// ===============================================================
// ===================== MANY TO MANY TABLES =====================
// ===============================================================

// TABLE chatbot_core.agent_tool {
//   agent_id uuid [not null, ref: > chatbot_core.agent.id]
//   tool_id uuid [not null, ref: > chatbot_core.tool.id]
//
//   Note: 'Table to store many-to-many relationship between agent and tool.'
// }

